from client import code_from_model, check_model
from prompt_toolkit import PromptSession
from prompt_toolkit.key_binding import KeyBindings
from prompt_toolkit.application import run_in_terminal
from colorama import Fore, init
import pyperclip
import json
import re
import threading
import time
import sys

init(autoreset=True)

action_selection_bindings = KeyBindings()

@action_selection_bindings.add('c-y') 
def _(event):
    """Binding for Ctrl-Y to trigger 'copy' action."""
    run_in_terminal(lambda: print(Fore.YELLOW + "COPYING"))
    event.app.exit("copy")

@action_selection_bindings.add('c-c')  
def _(event):
    """Binding for Ctrl+C to trigger 'cancel' (quit) action."""
    run_in_terminal(lambda: print(Fore.RED + "QUITTING (Ctrl+C)."))
    event.app.exit("cancel") 


text_input_bindings = KeyBindings()



with open("example.json", "r", encoding="utf-8") as f:
    base_examples = json.load(f)


spinner_stop_event = threading.Event()
spinner_thread = None
spinner_message = ""

def animate_spinner():
    """Animates a simple text-based spinner in the terminal."""
    chars = ['-', '\\', '|', '/']
    i = 0
    while not spinner_stop_event.is_set():
        sys.stdout.write(f'\r{Fore.CYAN}{spinner_message} {chars[i % len(chars)]} ')
        sys.stdout.flush()
        time.sleep(0.1)
        i += 1
        
    sys.stdout.write('\r' + ' ' * (len(spinner_message) + 5) + '\r')
    sys.stdout.flush()

def start_spinner(message: str):
    """Starts the spinner animation with a given message."""
    global spinner_thread, spinner_message
    spinner_message = message
    spinner_stop_event.clear()
    spinner_thread = threading.Thread(target=animate_spinner)
    spinner_thread.daemon = True 
    spinner_thread.start()

def stop_spinner():
    """Stops the spinner animation."""
    global spinner_thread
    if spinner_thread and spinner_thread.is_alive():
        spinner_stop_event.set() 
        spinner_thread.join(timeout=0.5) 
        if spinner_thread.is_alive(): 
            sys.stdout.write('\r' + ' ' * (len(spinner_message) + 5) + '\r')
            sys.stdout.flush()
        spinner_thread = None


def clean_code(code: str) -> str:
    """
    Removes triple backticks and optional language hints from a code string.
    This is useful if the model sometimes returns code wrapped in markdown blocks.
    """
    return re.sub(r'^```[a-zA-Z]*\n|\n```$', '', code.strip())



def main():
    """
    Main function to run the interactive code generation assistant.
    Manages the conversation history and user interactions.
    """
    start_spinner("Model checking...")
    try:
        check_model() 
    except Exception as e:
        print(Fore.RED+"Error: ",e)
        quit() 
        
    finally:
        stop_spinner() 
    print(Fore.GREEN + "Model check complete.") 


    history = list(base_examples)
    current_prompt = None 

    while True:
        if current_prompt is None:
            
            text_input_session = PromptSession(key_bindings=text_input_bindings)
            print(Fore.YELLOW + ">>> ", end="")
            user_input = text_input_session.prompt() 
        else:
            
            user_input = current_prompt
            current_prompt = None 

        
        if not user_input.strip():
            print(Fore.RED + "Quitting...")
            break 
        
        
        start_spinner("Generating code...") 
        generated_code = ""
        try:
            
            resp_generator = code_from_model(promt=user_input, history=history)
            
            first_chunk_received = False
            for chunk in resp_generator:
                if not first_chunk_received:
                    stop_spinner() 
                    first_chunk_received = True
                
                print(Fore.BLUE + chunk.message.content, end="", flush=True)
                generated_code += chunk.message.content
            
            if not first_chunk_received: 
                stop_spinner() 
                print(Fore.RED + "No code generated by the model.")

            print() 
        except Exception as e:
            stop_spinner() 
            print(Fore.RED + f"Error during code generation: {e}")
            generated_code = "" 

        current_code = generated_code 
        
        
        history.append({"role": "user", "content": user_input})
        history.append({"role": "assistant", "content": current_code})
        
        
        while True: 
            print(Fore.YELLOW + "Press Enter to edit/continue conversation")
            print(Fore.GREEN + "Press Ctrl-Y to copy code")
            print(Fore.RED + "Press Ctrl-C to cancel/quit")

            try:
                action_session = PromptSession(key_bindings=action_selection_bindings)
                action = action_session.prompt("> ")
            except (EOFError, KeyboardInterrupt):
                print(Fore.RED + "Forced exit.")
                return 
                
            if action == "copy":
                pyperclip.copy(clean_code(current_code))
                print(Fore.GREEN + "Code copied! Choose another action or press Ctrl-C to quit.")
                
                continue 
            elif action == "cancel":
                print(Fore.RED + "Quitting.")
                return 
                edit_instruction = action 
                
                
                current_prompt = (
                    f"The following code was incorrect or not what I expected:\n"
                    f"```\n{current_code}\n```\n"
                    f"Please revise it according to this new instruction:\n{edit_instruction}"
                )
                break
                
if __name__ == "__main__":
    main()
